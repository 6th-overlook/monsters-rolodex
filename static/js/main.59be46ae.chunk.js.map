{"version":3,"sources":["components/title-pane/TitlePane.component.jsx","components/card/CustomCard.component.jsx","components/card-list/CardList.component.jsx","components/search-box/SearchBox.component.jsx","components/searchable-cards/SearchableCards.component.jsx","App.js","serviceWorker.js","index.js"],"names":["TitlePane","title","className","Meta","Card","CustomCard","monster","hoverable","style","width","cover","alt","src","id","name","description","email","CardList","monsters","searchArg","filteredList","filter","toLowerCase","includes","map","key","SearchBox","placeholder","handleSearch","onChange","SearchableCards","state","searchKeyword","updateFilter","e","setState","target","value","fetch","usersResponse","json","users","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NAIe,SAASA,EAAT,GAA+B,IAAVC,EAAS,EAATA,MAChC,OACI,yBAAKC,UAAU,cACX,yBAAKA,UAAU,SACVD,GAGL,kBAAC,IAAD,CAASC,UAAU,mB,oFCRvBC,G,MAASC,IAATD,MACO,SAASE,EAAT,GAAgC,IAAXC,EAAU,EAAVA,QAChC,OACI,iCAAM,kBAAC,IAAD,CACFC,WAAS,EACTC,MAAO,CAAEC,MAAO,KAChBC,MAAO,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BN,EAAQO,GAAlC,6BAE7B,kBAACV,EAAD,CAAMF,MAAOK,EAAQQ,KAAMC,YAAaT,EAAQU,UCN7C,SACXC,EADW,GACwB,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,UACfC,EAAeF,EAASG,QAAO,SAACf,GAAD,OAAaA,EAAQQ,KAAKQ,cAAcC,SAASJ,EAAUG,kBAChG,OACI,yBAAKpB,UAAU,aAEPkB,EAAaI,KAAI,SAAClB,GAAD,OACb,kBAAC,EAAD,CAAYmB,IAAKnB,EAAQO,GAAIP,QAASA,Q,oBCT3C,SAASoB,EAAT,GAAkD,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,aAC7C,OACI,yBAAK1B,UAAU,cACX,yBAAKA,UAAU,cACX,kBAAC,IAAD,CAAOyB,YAAaA,EAAaE,SAAUD,M,ICFtCE,E,4MAEjBC,MAAQ,CACJb,SAAU,GACVc,cAAe,I,EASnBC,aAAe,SAAAC,GACX,EAAKC,SAAS,CAACH,cAAeE,EAAEE,OAAOC,S,oMANXC,MAAM,8C,cAA5BC,E,gBACcA,EAAcC,O,OAA5BC,E,OACNC,KAAKP,SAAS,CAAEjB,SAAUuB,I,qIAQ1B,OACI,yBAAKvC,UAAU,oBACX,kBAAC,EAAD,CAAWyB,YAAY,kBAAkBC,aAAcc,KAAKT,eAC5D,kBAAC,EAAD,CAAUf,SAAUwB,KAAKX,MAAMb,SAAUC,UAAWuB,KAAKX,MAAMC,qB,GArBlCW,aCG9B,SAASC,IACpB,OACI,yBAAK1C,UAAU,OACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CAAWD,MAAM,qBACjB,kBAAC,EAAD,QCDI4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.59be46ae.chunk.js","sourcesContent":["import React from 'react'\nimport './TitlePane.css'\nimport {Divider, Typography} from 'antd'\n\nexport default function TitlePane({ title }) {\n    return (\n        <div className=\"title-pane\">\n            <div className=\"title\">\n                {title}\n            </div>\n                \n            <Divider className=\"black-divider\" />\n        </div>\n    )\n}\n","import React from 'react'\nimport { Card } from 'antd'\nimport './CustomCard.css'\nconst { Meta } = Card;\nexport default function CustomCard({monster}) {\n    return (\n        <div> <Card\n            hoverable\n            style={{ width: 240 }}\n            cover={<img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2&size=500x500`} />}\n        >\n            <Meta title={monster.name} description={monster.email} />\n        </Card>\n        </div>\n    )\n}\n","import React from 'react'\nimport './CardList.css'\nimport CustomCard from '../card/CustomCard.component'\n\n\nexport default function\n    CardList({ monsters, searchArg }) {\n    const filteredList = monsters.filter((monster) => monster.name.toLowerCase().includes(searchArg.toLowerCase()))\n    return (\n        <div className=\"card-list\">\n            {\n                filteredList.map((monster) =>\n                    <CustomCard key={monster.id} monster={monster} />\n                )\n            }\n        </div>\n    )\n}\n","import React from 'react'\nimport './SearchBox.css'\nimport { Input } from 'antd';\nexport default function SearchBox({ placeholder, handleSearch}) {\n    return (\n        <div className=\"search-box\">\n            <div className=\"search-bar\">\n                <Input placeholder={placeholder} onChange={handleSearch}/>\n            </div>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\n\nimport './SearchableCards.css'\nimport CardList from '../card-list/CardList.component'\nimport SearchBox from '../search-box/SearchBox.component'\nexport default class SearchableCards extends Component {\n\n    state = {\n        monsters: [],\n        searchKeyword: \"\"\n    };\n\n    async componentDidMount() {\n        const usersResponse = await fetch(\"https://jsonplaceholder.typicode.com/users\")\n        const users = await usersResponse.json();\n        this.setState({ monsters: users });\n    }\n\n    updateFilter = e => {\n        this.setState({searchKeyword: e.target.value})\n    }\n\n    render() {\n        return (\n            <div className=\"searchable-cards\">\n                <SearchBox placeholder=\"Search Monsters\" handleSearch={this.updateFilter}/>\n                <CardList monsters={this.state.monsters} searchArg={this.state.searchKeyword}/>\n            </div>\n        );\n    }\n}\n","import './App.css';\n\nimport React from 'react'\n\nimport TitlePane from \"./components/title-pane/TitlePane.component\"\n\nimport SearchableCards from './components/searchable-cards/SearchableCards.component'\n\nexport default function App() {\n    return (\n        <div className=\"App\">\n            <div className=\"App-header\">\n                <TitlePane title=\"Monsters Rolodex\" />\n                <SearchableCards />\n            </div>\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}